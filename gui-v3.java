/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.simulator;

import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import com.simulator.Assembler;
import javax.swing.JOptionPane;

public class gui extends javax.swing.JFrame {

    public gui() {
        initComponents();
        int address = 4096;
        String s = "";
        
        for(int i = 0 ; i<100 ; i++)
        {
            s = "0x";
            s += convertToHexa(address, 8);            
            jTable4.setValueAt(s, i, 0);       //set address value
            jTable4.setValueAt(address, i, 2);     //set decimal value            
            address += 4;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"R0    (00000)", "r0  ", null},
                {"R1    (00001)", "at", null},
                {"R2    (00010)", "v0", null},
                {"R3    (00011)", "v1", null},
                {"R4    (00100)", "a0", null},
                {"R5    (00101)", "a1", null},
                {"R6    (00110)", "a2", null},
                {"R7    (00111)", "a3", null},
                {"R8    (01000)", "t0", "0x00000003"},
                {"R9    (01001)", "t1", "0x00000002"},
                {"R10 (01010)", "t2", null},
                {"R11 (01011)", "t3", "0x00001000"},
                {"R12 (01100)", "t4", null},
                {"R13 (01101)", "t5", null},
                {"R14 (01110)", "t6", null},
                {"R15 (01111)", "t7", null},
                {"R16 (10000)", "s0", null},
                {"R17 (10001)", "s1", null},
                {"R18 (10010)", "s2", null},
                {"R19 (10011)", "s3", null},
                {"R20 (10100)", "s4", null},
                {"R21 (10101)", "s5", null},
                {"R22 (10110)", "s6", null},
                {"R23 (10111)", "s7", null},
                {"R24 (11000)", "t8", null},
                {"R25 (11001)", "t9", null},
                {"R26 (11010)", "k0", null},
                {"R27 (11011)", "k1", null},
                {"R28 (11100)", "gp", null},
                {"R29 (11101)", "sp", null},
                {"R30 (11110)", "s8", null},
                {"R31 (11111)", "ra", null}
            },
            new String [] {
                "Number", "Register", "Value"
            }
        ));
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(100);
        }

        jLabel1.setText("PC");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jButton1.setText("Excute");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Excute all");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Address", "Instruction", "Instruction (hexa)"
            }
        ));
        jScrollPane4.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable3.getColumnModel().getColumn(1).setPreferredWidth(50);
            jTable3.getColumnModel().getColumn(2).setPreferredWidth(50);
        }

        jTabbedPane1.addTab("Text segment", jScrollPane4);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Address", "Instruction (Binary)"
            }
        ));
        jScrollPane3.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(200);
        }

        jTabbedPane1.addTab("Binary instructions", jScrollPane3);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Adress", "Content", "Address (Decimal)"
            }
        ));
        jScrollPane5.setViewportView(jTable4);

        jTabbedPane1.addTab("Data segment", jScrollPane5);

        jButton3.setText("Clear ");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Clear");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel3.setText("Register File");

        jLabel4.setText("Memory");

        jButton5.setText("Compile");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel2.setText("Write you program here");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(233, 233, 233))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(59, 59, 59)
                                        .addComponent(jButton1)
                                        .addGap(72, 72, 72)
                                        .addComponent(jButton5))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(44, 44, 44)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3)))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(157, 157, 157))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(205, 205, 205))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton5)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addGap(0, 46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    //Compile button
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        program.clear();
        String tt = "";
        Scanner in = new Scanner(jTextArea1.getText());
        while(in.hasNextLine())
        {
            tt = in.nextLine();
            program.add(tt);
        }
        binaryProgram = Assembler.assembler(program);
        String addres = "ox";
        String Instruction = "";
        String hexaInstruction = "ox";
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel();
        
        for(int i = 0 ; i<program.size() ; i++)
        {
            addres = "ox";
            hexaInstruction = "ox";
            Instruction = program.get(i);
            addres += convertToHexa((textMemoryIDX), 8);   
            int temp = Integer.parseInt(binaryProgram.get(i), 2);
            hexaInstruction += convertToHexa(temp, 8);
            textMemoryIDX += 4;
            if(textMemoryIDX < 4096)
            {
                model.addRow( new Object[] {addres, Instruction, hexaInstruction});   
                model2.addRow(new Object[] {addres, binaryProgram.get(i)});
            }
            else System.out.println("There is no free space in memory");
        }
    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        for(int i = 0 ; i<32 ; i++)
        {
            jTable1.setValueAt(null, i, 2);
        }
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        for(int i = 0 ; i<binaryProgram.size() ; i++)
        {
            toExcute(binaryProgram.get(i));
        }
    }                                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        String command = binaryProgram.get(excuteIDX++);
        toExcute(command);       
    }                                        

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    //clear memory
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
   
        jTable3.removeAll();        
        jTable2.removeAll();
        for(int i = 0 ; i< 100 ; i++)
        {
            jTable4.setValueAt(null, i, 0);
            jTable4.setValueAt(null, i, 1);
            jTable4.setValueAt(null, i, 2);
        }
        
        pc = 0;
    }                                        

    private int convertToDec(String str)
    {
        int res = 0, pow = 0;
        for(int i = str.length() - 1 ; i>=0 ; i--)
        {
            res += ( Character.getNumericValue(str.charAt(i)) * Math.pow(2, pow));
            pow++;
        }
        return res;
    }
    
    static public String convertToBinary(int x, int numOfBits)
    {
        String res = "";      
        res = Integer.toBinaryString(x);
        while(res.length() < numOfBits) res = '0' + res;
        return res;
    }
    static private String convertToHexa(int x, int numOfBits)
    {
        String res = "";      
        res = Integer.toHexString(x);
        while(res.length() < numOfBits) res = '0' + res;
        return res;
    }
    static private String subStr(int st, int ed, String str)
    {
        String res = "";
        for(int i = st ; i<ed ; i++)
        {
            res += str.charAt(i);
        }
        return res;
    }
    private void toExcute(String str)
    {
      //  System.out.println(str.substring(26, 32));
        String opCode = str.substring(0, 6);    
        if(opCode.equals("000000"))        //R-Type instructions
        {
            String instruction = str.substring(26, 32);
            String reg1 = "";
            String reg2 = "";            
            String regDst = "";    
            String shamt = "";
            int num1 = 0;
            int num2 = 0;
            //parse string           
            if(instruction.equals("000000"))      //SSL instruction
            {
                reg1 = str.substring(11, 16);
                shamt = str.substring(21, 26);   //shamt
                regDst = str.substring(16, 21);  
                
                //Extract values from table
                String x1 = jTable1.getValueAt(convertToDec(reg1), 2).toString();
                
                //Remove 0x from the string
                x1 = x1.substring(2, x1.length());
                
                //Convert hexa to decimal
                num1 = Integer.parseInt(x1, 16);
                num2 = Integer.parseInt(shamt, 2);
            }
            else                //Other instructions
            {
                reg1 = str.substring(6, 11);
                reg2 = str.substring(11, 16);
                regDst = str.substring(16, 21);
                       
    //            System.out.println("regDst = " + regDst);
    //            System.out.println("reg1 = " + reg1);
    //            System.out.println("reg2 = " + reg2);

                //Extract values from table
                String x1 = jTable1.getValueAt(convertToDec(reg1), 2).toString();
                String x2 = jTable1.getValueAt(convertToDec(reg2), 2).toString();

                //Remove 0x from the string
                x1 = x1.substring(2, x1.length());
                x2 = x2.substring(2, x2.length());

                //Convert hexa to decimal
                num1 = Integer.parseInt(x1, 16);
                num2 = Integer.parseInt(x2, 16);
            }
            
            int res = 0;
            //perform the operation
            if(instruction.equals("100000"))   //func : add
            {                    
                 res = num1 + num2;
            } 
            else if(instruction.equals("100010"))  //func : sub
            {
                 res = num1 - num2;
            }
            else if(instruction.equals("100100"))  //func : AND
            {
                 res = num1 & num2;
            }

            else if(instruction.equals("100101"))  //func : OR
            {
                 res = num1 | num2;
            }
            else if(instruction.equals("101010"))  //func : SLT
            {
                 if(num1 < num2) res = 1;
                 else res = 0;
            }
            else if(instruction.equals("000000"))  //func : SLL
            {
                System.out.println("num1 = " + num1);
                System.out.println("num2 = " + num2);
                 res = num1 << num2;
            }
            //convert decimal to hexa to save in table                
            String y = "0x" + convertToHexa(res, 8);

            //save in the table
            jTable1.setValueAt(y, convertToDec(regDst), 2);
        }
        else if(opCode.equals("001111"))    //lui instruction
        {
            String regDst = str.substring(11, 16);
            String imm = str.substring(16, 32); 
            //Convert binary to decimal
            int num2 = Integer.parseInt(imm, 2);
            //convert decimal to hexa to save in table                
            String y = "0x" + convertToHexa(num2, 8);
            //save in the table
            jTable1.setValueAt(y, convertToDec(regDst), 2);
        }
        else if(opCode.equals("101011") || opCode.equals("100011"))  //sw, lw
        {
            System.out.println("hhhh");
//            String reg1 = str.substring(6, 11);
//            String reg2 = str.substring(11, 16);        
//            String offset = str.substring(16, 32);
//            int Reg1 = Integer.parseInt(reg1, 2);
//            int Reg2 = Integer.parseInt(offset, 2);
//            
//            int memOffset = Reg1 + Reg2;
//            if(memOffset >= 100)
//            {
//                JOptionPane.showMessageDialog(this, "Memory indexies are from 4096 to 4492",  
//                                   "ERROR", JOptionPane.ERROR_MESSAGE); 
//            }
//            else
//            {                
//                if(opCode.equals("101011"))     //sw
//                {   
//                    String res = jTable1.getValueAt(Reg2, 2).toString();                    
//                    jTable4.setValueAt(res, memOffset, 1);
//                }
//                else                            //lw
//                {
//                    String res = jTable4.getValueAt(memOffset, 1).toString();
//                    jTable1.setValueAt(res, Reg2, 2);
//                    
//                }
//            }
        }
        else      //I-Type
        {
            String reg1 = str.substring(6, 11);
            String regDst = str.substring(11, 16);
            String imm = str.substring(16, 32); 

            //Extract values from table
            String x1 = jTable1.getValueAt(convertToDec(reg1), 2).toString();

            //Remove 0x from the string
            x1 = x1.substring(2, x1.length());

            //Convert hexa to decimal
            int num1 = Integer.parseInt(x1, 16);
            //Convert binary to decimal
            int num2 = Integer.parseInt(imm, 2);
            int res = 0;
            //perform the operation
            if(opCode.equals("001000"))   //func : addi
            {                    
                 res = num1 + num2;
            }
            else if(opCode.equals("001100"))  //func : ANDi
            {
                 res = num1 & num2;
            }

            else if(opCode.equals("001101"))  //func : ORi
            {
                 res = num1 | num2;
            }
            else if(opCode.equals("001101"))  //func : SLTI
            {
                 if(num1 < num2) res = 1;
                 else res = 0;
            }
            //convert decimal to hexa to save in table                
            String y = "0x" + convertToHexa(res, 8);

            //save in the table
            jTable1.setValueAt(y, convertToDec(regDst), 2);
        }        
        jTextField1.setText(pc.toString());
        pc += 4;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {  
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gui().setVisible(true);
            }
        });
    }
    static String str = "00000001000010010101000000000000";
    static String sl = "00000000000010010101000001000000";
    static String itype = "00110101000010100000000000000100";   
    ArrayList<String> program = new ArrayList<>();
    ArrayList<String> binaryProgram = new ArrayList<>();
    Integer textMemoryIDX = 0;
    Integer dataMemoryIDX = 4096;
    Integer excuteIDX = 0;
    Integer pc = 0;
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration                   
}
/*
add $t2, $t0, $t1
sll $t2, $t1, 4
addi $t2, $t0, 6
*/

//sw $t1, 0($t3)
//10101101011010010000000000000000
//10101101011010010000000000000000
